server:
  address: localhost
  port: 8080

spring:
  application:
    name: microservicio-servicios
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  datasource:
    url: jdbc:h2:mem:marketplace-db;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: password
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    database-platform: org.hibernate.dialect.H2Dialect
  h2:
    console:
      enabled: true
      path: /h2-console
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8180/realms/microservices-ecosystem
          jwk-set-uri: http://localhost:8180/realms/microservices-ecosystem/protocol/openid-connect/certs
  
  # Kafka Configuration with Spring Cloud Stream (matching orden-pago)
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
          auto-create-topics: true
          configuration:
            "[key.serializer]": org.apache.kafka.common.serialization.StringSerializer
            "[value.serializer]": org.springframework.kafka.support.serializer.JsonSerializer
            "[key.deserializer]": org.apache.kafka.common.serialization.StringDeserializer
            "[value.deserializer]": org.springframework.kafka.support.serializer.JsonDeserializer
            "[spring.json.trusted.packages]": "*"
      bindings:
        # Consumer binding for service requests FROM orden-pago
        serviceRequest-in-0:
          destination: service-request-topic
          content-type: application/json
          group: services-microservice-group
        # Producer binding for service responses TO orden-pago  
        serviceResponse-out-0:
          destination: service-response-topic
          content-type: application/json
        # Main event publisher (unified binding for all service events)
        serviceEvents-out-0:
          destination: marketplace.service.events
          content-type: application/json
        # Existing event publishers (keep for backwards compatibility)
        serviceCreated-out-0:
          destination: marketplace.service.created
          content-type: application/json
        serviceUpdated-out-0:
          destination: marketplace.service.updated
          content-type: application/json
        serviceDeleted-out-0:
          destination: marketplace.service.deleted
          content-type: application/json
  
# Keycloak Configuration
keycloak:
  realm: microservices-ecosystem
  auth-server-url: http://localhost:8180
  ssl-required: external
  resource: microo-service
  credentials:
    secret: XhzE490FVJwoJ3OdLlyyqpDyIaf1lgVe
  use-resource-role-mappings: true
  bearer-only: false
      
# Eureka Client Configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
    enabled: true
  instance: 
    prefer-ip-address: true
    hostname: localhost
    instance-id: ${spring.application.name}:${server.port}
    health-check-url-path: /actuator/health

# Kafka Topics Configuration (custom properties for topic names)
kafka:
  topics:
    service-events: marketplace.service.events
    service-created: marketplace.service.created
    service-updated: marketplace.service.updated
    service-deleted: marketplace.service.deleted
    # Request-Response topics for orden-pago communication
    service-request: service-request-topic
    service-response: service-response-topic

